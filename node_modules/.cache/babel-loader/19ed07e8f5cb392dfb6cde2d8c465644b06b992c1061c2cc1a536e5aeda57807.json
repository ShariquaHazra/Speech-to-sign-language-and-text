{"ast":null,"code":"var _jsxFileName = \"/Users/shariquahazra/Desktop/SpeechSign-AI-Speech-to-ISL/src/SignLanguageDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport dictionary from './isl_dictionary.json'; // Adjust the path according to your project structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SignLanguageDisplay({\n  text\n}) {\n  _s();\n  const [videoUrls, setVideoUrls] = useState([]);\n  const [currentVideoIndex, setCurrentVideoIndex] = useState(0);\n  const generateSignLanguage = text => {\n    const words = text.split(' ');\n    const urls = [];\n    let i = 0;\n    while (i < words.length) {\n      // Check for phrases in the dictionary\n      let foundPhrase = false;\n      for (let j = Math.min(4, words.length - i); j > 0; j--) {\n        // Check up to 4-word phrases\n        const phrase = words.slice(i, i + j).join(' ').toLowerCase();\n        if (dictionary[phrase]) {\n          urls.push(`${process.env.PUBLIC_URL}/${dictionary[phrase]}`);\n          i += j; // Move index past the phrase\n          foundPhrase = true;\n          break;\n        }\n      }\n      if (!foundPhrase) {\n        const word = words[i].toLowerCase();\n        if (dictionary[word]) {\n          urls.push(`${process.env.PUBLIC_URL}/${dictionary[word]}`);\n        } else {\n          urls.push(null); // No video found for this word/phrase\n        }\n        i++;\n      }\n    }\n    setVideoUrls(urls);\n    setCurrentVideoIndex(0); // Reset the current video index\n  };\n  useEffect(() => {\n    if (text) {\n      generateSignLanguage(text);\n    }\n  }, [text]);\n  const handleVideoEnded = () => {\n    setCurrentVideoIndex(prevIndex => prevIndex + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-player\",\n      children: videoUrls.length > 0 && currentVideoIndex < videoUrls.length && /*#__PURE__*/_jsxDEV(\"video\", {\n        src: videoUrls[currentVideoIndex],\n        controls: true,\n        autoPlay: true,\n        onEnded: handleVideoEnded,\n        muted: true,\n        style: {\n          height: '500px',\n          width: '800px'\n        }\n      }, currentVideoIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(SignLanguageDisplay, \"Wr7UqEGNZSv5afBUy6t1g5NbKgw=\");\n_c = SignLanguageDisplay;\nexport default SignLanguageDisplay;\nvar _c;\n$RefreshReg$(_c, \"SignLanguageDisplay\");","map":{"version":3,"names":["React","useState","useEffect","dictionary","jsxDEV","_jsxDEV","SignLanguageDisplay","text","_s","videoUrls","setVideoUrls","currentVideoIndex","setCurrentVideoIndex","generateSignLanguage","words","split","urls","i","length","foundPhrase","j","Math","min","phrase","slice","join","toLowerCase","push","process","env","PUBLIC_URL","word","handleVideoEnded","prevIndex","className","children","src","controls","autoPlay","onEnded","muted","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shariquahazra/Desktop/SpeechSign-AI-Speech-to-ISL/src/SignLanguageDisplay.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport dictionary from './isl_dictionary.json'; // Adjust the path according to your project structure\r\n\r\nfunction SignLanguageDisplay({ text }) {\r\n  const [videoUrls, setVideoUrls] = useState([]);\r\n  const [currentVideoIndex, setCurrentVideoIndex] = useState(0);\r\n\r\n  const generateSignLanguage = (text) => {\r\n    const words = text.split(' ');\r\n    const urls = [];\r\n\r\n    let i = 0;\r\n    while (i < words.length) {\r\n      // Check for phrases in the dictionary\r\n      let foundPhrase = false;\r\n      for (let j = Math.min(4, words.length - i); j > 0; j--) { // Check up to 4-word phrases\r\n        const phrase = words.slice(i, i + j).join(' ').toLowerCase();\r\n        if (dictionary[phrase]) {\r\n          urls.push(`${process.env.PUBLIC_URL}/${dictionary[phrase]}`);\r\n          i += j; // Move index past the phrase\r\n          foundPhrase = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!foundPhrase) {\r\n        const word = words[i].toLowerCase();\r\n        if (dictionary[word]) {\r\n          urls.push(`${process.env.PUBLIC_URL}/${dictionary[word]}`);\r\n        } else {\r\n          urls.push(null); // No video found for this word/phrase\r\n        }\r\n        i++;\r\n      }\r\n    }\r\n\r\n    setVideoUrls(urls);\r\n    setCurrentVideoIndex(0); // Reset the current video index\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (text) {\r\n      generateSignLanguage(text);\r\n    }\r\n  }, [text]);\r\n\r\n  const handleVideoEnded = () => {\r\n    setCurrentVideoIndex(prevIndex => prevIndex + 1);\r\n  };\r\n\r\n  return (\r\n    <div className=\"video-container\">\r\n      <div className=\"video-player\">\r\n        {videoUrls.length > 0 && currentVideoIndex < videoUrls.length && (\r\n          <video\r\n            key={currentVideoIndex}\r\n            src={videoUrls[currentVideoIndex]}\r\n            controls\r\n            autoPlay\r\n            onEnded={handleVideoEnded}\r\n            muted\r\n            style={{ height: '500px', width: '800px' }}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignLanguageDisplay;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}